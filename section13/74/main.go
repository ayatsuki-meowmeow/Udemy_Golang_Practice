package main

// 複数のパッケージのインポートは、()で囲む
import (
		"fmt"

		// 自作のパッケージをインポートする場合は、src/以下からのパスを指定する
		// fooパッケージをインポート
		"golang_udemy/section13/74/foo"

		// 独自のパッケージをインポートする場合は、GOPATH/以下にないとインポートできない
		// インポートしたパッケージは使用していないとコンパイルエラーになる

		// パッケージ名の短縮
		// 別名をつけることで、パッケージ名を省略して呼び出すことができる
		// 別名をつける場合は、インポートするパッケージ名の前に別名をつける
		// "fmt"を"f"としてインポート
		f"fmt"

		// パッケージ名を.にすると、パッケージ名を記載せずに呼び出すことができる
		// ただし、fmtパッケージ内の関数と同じ名前の関数をこのファイル内で定義すると、コンパイルエラーになる
		// したがって、パッケージ名を.にするのは、あまり推奨されていない
		."fmt"

		// パッケージのインポートは、アルファベット順にすると可読性が高くなる
		// また、標準パッケージ、サードパーティパッケージ、自作パッケージを分けてインポートすると可読性が高くなる

		// fooパッケージでtimeパッケージを使っていたとして、mainパッケージでtimeパッケージをインポートしていなかった場合、コンパイルエラーになる
		// 要は、パッケージごとにインポートする必要がある
)

// スコープ
// 変数や定数、型、関数などが参照可能な範囲のこと
// Goにおけるスコープは、大きい単位から、パッケージ、ファイル、関数、ブロック、制御構文となる
// 関数や変数、定数、型といったプログラムの構成要素は全てパッケージに属する
// したがって、パッケージのスコープを理解することは、要素の可視性のコントロールのためにも重要

// パッケージスコープ
// Goのプログラムは、複数のパッケージを組み合わせて構成される
// 関数や変数をパッケージごとに分割して、それらを組み合わせてアプリケーションを構築する
// パッケージ間で変数や関数、定数を共有するために他のパッケージから参照できるようにしたり、逆にパッケージ内でしか使わないものは他のパッケージから参照できないように隠蔽したりする
// 要は、可視範囲のコントロールを行うために、パッケージスコープを使う

// 関数のスコープ
func appName() string {
		// 関数内で定義された定数や変数は、関数内でしか参照できない
		// したがって、AppNameやVersionはappName()関数内でしか参照できない
		const AppName = "Go Application"
		var Version string = "1.0"
		return AppName + " " + Version
}

func Do(s string) (b string) {
		// 関数の返り値としてbを定義した後、下記のようにbを定義すると、再定義になってしまい、エラーになる
		// var b string = s
		// したがって、関数の返り値として定義した変数は、再定義できない

		// このような場合は、bにsを代入することで、再定義を回避する
		b = s

		// 関数内で重複した変数名を定義したい場合は下記のようにする
		// ただし、識別子を重複させるような書き方は避けるべき
		{
				// このブロック内でのみ有効な変数を定義する(再定義とはならない)
				var b string = "hoge"
				fmt.Println(b) // hoge
		}

		// ブロック内で定義した変数は、ブロック外では参照できない
		// したがって、ここでのbは、関数の返り値として定義したbとなる
		f.Println(b) // test
		return b // test
}

func main() {
		// fooパッケージのMaxを呼び出す
		// パッケージ名.変数名 で呼び出す
		// Maxは大文字で始まっているので、他のパッケージからも参照可能
		// 識別子が大文字で始まる場合は、他のパッケージからも参照可能
		fmt.Println(foo.Max) // 100

		// minは小文字で始まっているので、他のパッケージからは参照できない
		// 識別子が小文字で始まる場合は、他のパッケージからは参照できない
		// fmt.Println(foo.min) // コンパイルエラー

		// fooパッケージのReturnMinを呼び出すことで、minの値を取得する
		// minをmainパッケージから参照するわけではない。参照するのは、fooパッケージのReturnMin関数
		// ReturnMinは大文字で始まっているので、他のパッケージからも参照可能
		f.Println(foo.ReturnMin()) // 1

		// パッケージ名を.にすると、パッケージ名を記載せずに呼び出すことができる
		Println(foo.ReturnMin()) // 1

		// appName関数は、mainパッケージ内で定義されているので、mainパッケージ内であればどこからでも呼び出すことができる
		f.Println(appName()) // Go Application 1.0

		// appName関数内で定義されている定数や変数をmain関数で呼び出すことはできない
		// 関数内で定義された定数や変数は、関数内でしか参照できないため(外部の関数からは参照できない)
		// fmt.Println(AppName) // コンパイルエラー 未定義となる
		// fmt.Println(Version) // コンパイルエラー 未定義となる

		f.Println(Do("test")) // test
}
